name: Build and push foobar-api container image

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "kubernetes/.argocd-source-*.yaml"
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: foobar-api
  REGISTRY_USER: ambrosiaaaaa
  REGISTRY: docker.io

jobs:
  test:
    runs-on: [my-runner-foobar]

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup Go with explicit cache
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: foobar-api/go.sum

      # Check and run tests
      - name: Check and run tests
        working-directory: foobar-api
        run: |
          if [ ! -f go.mod ] || [ ! -f go.sum ]; then
            echo "Error: go.mod or go.sum not found!"
            exit 1
          fi
          TEST_FILES=$(find . -name "*_test.go")
          if [ -z "$TEST_FILES" ]; then
             echo "Warning: No test files found, skipping tests."
          else
            go test ./... -v
          fi

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read version from file
        id: version
        run: |
          VERSION=$(cat foobar-api/.version)
          echo "Read version: $VERSION" # Debug
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT # Debug of the output file

      - name: Super Debug
        run: |
          echo "Conteúdo do arquivo VERSION:"
          cat foobar-api/.version
          echo "----------------"
          echo "Output do step anterior:"
          echo "${{ steps.version.outputs.VERSION }}"
          echo "----------------"
          echo "Tag completa que será usada:"
          echo "${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}"

      - name: Check if DOCKERHUB_TOKEN is set
        run: |
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "Erro: DOCKERHUB_TOKEN está vazio!"
            exit 1
          else
            echo "DOCKERHUB_TOKEN está definido."
          fi
      
      - name: Debug credentials
        run: |
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Username: ${{ env.REGISTRY_USER }}"
          echo "Token set: ${{ secrets.DOCKERHUB_TOKEN != '' }}"
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./foobar-api
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}

